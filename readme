Assignment 3 readme File

------------------------------------------------------------------------
What is your name?
Jacob Santelli


------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.
Lectures, precept videos, lecture slides


------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

N/A

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?
This assignment took the life out of me, but I learned a ton.


------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?
N/A


------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."
None.


------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

   symtablelist.c: line 70: medium priority:
   Do you want to validate 'pvValue' through an assert?
Because pvValue is a void pointer, there is no way to validate its value.

   symtablelist.c: line 104: medium priority:
   Do you want to validate 'pvValue' through an assert?
Because pvValue is a void pointer, there is no way to validate its value.

   symtablelist.c: line 196: medium priority:
   Do you want to validate 'pvExtra' through an assert?
Because pvExtra is a void pointer, there is no way to validate its value.

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."
None.


------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

   symtablehash.c: line 138: medium priority:
   Do you want to validate 'pvValue' through an assert?
Because pvValue is a void pointer, there is no way to validate its value.
   symtablehash.c: line 187: medium priority:
   Do you want to validate 'pvValue' through an assert?
Because pvValue is a void pointer, there is no way to validate its value.
   symtablehash.c: line 290: medium priority:
   Do you want to validate 'pvExtra' through an assert?
Because pvExtra is a void pointer, there is no way to validate its value.

------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.005509 seconds.
-- 5000 bindings consumed 1.222684 seconds.
-- 50000 bindings consumed 121.626940 seconds.
-- 500000 bindings consumed More than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.007337 seconds.
-- 50000 bindings consumed 0.393246 seconds.
-- 500000 bindings consumed 75.575637 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.001168 seconds.
-- 5000 bindings consumed 0.007116 seconds.
-- 50000 bindings consumed 0.137265 seconds.
-- 500000 bindings consumed 1.755851 seconds.
